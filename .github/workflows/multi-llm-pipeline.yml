name: JanusAI_V2 Code Quality Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'
      - '**.ipynb'
      - '**.yaml'
      - '**.yml'
      - '**.json'
      - '**.toml'
      - '**.md'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'setup.py'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: true
        type: string

jobs:
  multi-llm-analysis:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # JanusAI needs full history for context

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install JanusAI_V2 and Dependencies
      run: |
        pip install --upgrade pip
        sudo apt-get update && sudo apt-get install -y jq

        # Clone the JanusAI_V2 repository
        git clone https://github.com/Mklevns/JanusAI_V2.git janus_ai

        # Install its specific dependencies from requirements.txt
        cd janus_ai
        pip install -r requirements.txt

    - name: Run JanusAI_V2 Pipeline Analysis
      # This step now runs from within the cloned directory
      working-directory: ./janus_ai
      run: |
        # Start the web server in the background
        python app.py &
        SERVER_PID=$!

        echo "Waiting for JanusAI server to start..."
        sleep 15 # Allow more time for the server to initialize

        # Trigger the pipeline via the webhook endpoint
        echo "Triggering analysis for PR #${{ github.event.pull_request.number || github.event.inputs.pr_number }}..."
        curl -X POST http://localhost:5000/webhook \
          -H "Content-Type: application/json" \
          -d '{
            "action": "opened",
            "pull_request": {
              "number": ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
            },
            "repository": {
              "full_name": "${{ github.repository }}"
            }
          }'

        # Wait for the pipeline to complete by polling the status
        echo "Waiting for analysis to complete..."
        for i in {1..90}; do # Increased wait time for complex analysis
          STATUS=$(curl -s http://localhost:5000/status | jq -r '.status')
          echo "Current status: $STATUS"
          if [ "$STATUS" = "completed" ] || [ "$STATUS" = "failed" ]; then
            echo "Analysis finished with status: $STATUS"
            break
          fi
          sleep 10
        done

        # Stop the server
        echo "Stopping JanusAI server."
        kill $SERVER_PID
      env:
        # These secrets must be configured in your GitHub repository settings
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # JanusAI_V2 uses the GEMINI_API_KEY name, not a separate DeepSeek key
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }} # Include if you customized JanusAI to use it
        PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
        REPOSITORY: ${{ github.repository }}

    # --- NOTE: The 'Advanced Workflow Analysis' step has been commented out. ---
    # This step called a custom '/advanced-demo' endpoint which is not standard in JanusAI_V2.
    # You can re-enable and adapt it if you have a custom version of the app.py server.
    #
    # - name: Run Advanced Workflow Analysis
    #   if: always()
    #   working-directory: ./janus_ai
    #   run: |
    #     # ...

    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: janus-ai-analysis-results
        # These paths assume JanusAI generates files in its root directory
        path: |
          janus_ai/pipeline_results.json
          janus_ai/workflow_execution.log
          janus_ai/analysis_report.md
        retention-days: 30

    - name: Comment Analysis Summary on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = 'janus_ai/analysis_report.md';
          let analysisComment = '## ðŸ¤– JanusAI_V2 Analysis Complete\n\n';

          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            analysisComment += report;
          } else {
            analysisComment += 'Analysis run finished, but the detailed report file was not found. Please check the workflow artifacts for logs.\n\n';
            analysisComment += '**Analysis powered by:** Gemini, ChatGPT, Claude, and DeepSeek.';
          }

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: analysisComment.substring(0, 65535) // Ensure comment is within GitHub's size limit
          });

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Run Security Analysis
      run: |
        pip install bandit safety
        bandit -r . -f json -o security_report.json || true
        safety check --json --output safety_report.json || true

    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      with:
        name: security-analysis
        path: |
          security_report.json
          safety_report.json
