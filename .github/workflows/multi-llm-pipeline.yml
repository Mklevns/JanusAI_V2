name: Multi-LLM Code Quality Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'          # Python files
      - '**.ipynb'       # Jupyter notebooks
      - '**.yaml'        # Config files
      - '**.yml'         # Config files
      - '**.json'        # JSON configs
      - '**.toml'        # TOML configs
      - '**.md'          # Documentation
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'setup.py'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: false
        type: string

jobs:
  multi-llm-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Multi-LLM Pipeline
      run: |
        pip install --upgrade pip
        pip install openai anthropic google-genai requests gitpython
        
        # Download pipeline files
        curl -sL https://github.com/multi-llm-pipeline/releases/latest/download/pipeline.tar.gz | tar xz
        
        # Alternative: Install from source (if available)
        # git clone https://github.com/your-pipeline-repo/multi-llm-pipeline.git pipeline
        # cd pipeline && pip install -e .
    
    - name: Configure for AI/ML Project
      run: |
        # Set AI/ML specific prompts for JanusAI_V2
        python -c "
        import json
        config = {
          'project_type': 'ai_ml',
          'focus_areas': [
            'model_architecture',
            'training_stability', 
            'data_processing',
            'numerical_stability',
            'memory_optimization',
            'gpu_utilization',
            'multimodal_integration'
          ],
          'custom_prompts': {
            'janus_specific': 'Focus on multimodal AI architecture, vision-language model integration, and training pipeline optimization'
          }
        }
        with open('pipeline_config.json', 'w') as f:
          json.dump(config, f, indent=2)
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
    
    - name: Run Multi-LLM Pipeline Analysis
      run: |
        python main.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPOSITORY: ${{ github.repository }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
        PROJECT_TYPE: "ai_ml"
    
    - name: Run Advanced Workflow Analysis
      if: always()
      run: |
        python advanced_pipeline_workflow.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPOSITORY: ${{ github.repository }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        PR_NUMBER: ${{ github.event.pull_request.number || github.event.inputs.pr_number }}
        PROJECT_TYPE: "ai_ml"
    
    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: multi-llm-analysis-results
        path: |
          pipeline_results.json
          workflow_execution.log
          analysis_report.md
        retention-days: 30
    
    - name: Comment Analysis Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Read analysis results if available
            let analysisComment = '## ü§ñ Multi-LLM Code Analysis Complete\n\n';
            
            if (fs.existsSync('analysis_report.md')) {
              const report = fs.readFileSync('analysis_report.md', 'utf8');
              analysisComment += report;
            } else {
              analysisComment += '‚úÖ Analysis completed successfully. Check the detailed report in the pipeline logs.\n\n';
              analysisComment += '**Analysis Focus Areas for JanusAI_V2:**\n';
              analysisComment += '- üß† Model architecture optimization\n';
              analysisComment += '- üîÑ Training pipeline stability\n';
              analysisComment += '- üëÅÔ∏è Vision-language integration\n';
              analysisComment += '- ‚ö° Performance and memory optimization\n';
              analysisComment += '- üîß Multimodal processing efficiency\n\n';
              analysisComment += '_Analysis powered by Gemini, ChatGPT, Claude, and DeepSeek_';
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisComment
            });
          } catch (error) {
            console.log('Error posting comment:', error);
          }

  # Separate job for security analysis (optional)
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Security Analysis
      run: |
        # Additional security checks for AI/ML code
        pip install bandit safety
        
        # Check for security issues
        bandit -r . -f json -o security_report.json || true
        
        # Check dependencies for vulnerabilities
        safety check --json --output safety_report.json || true
    
    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      with:
        name: security-analysis
        path: |
          security_report.json
          safety_report.json